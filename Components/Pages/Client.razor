@page "/clients"
@using VillageRentals.Components.Controller
@using VillageRentals.Components.Models
@inject ClientController ClientController


<h3>Client Management</h3>

<EditForm Model="newCustomer" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="firstName">First Name</label>
        <InputText id="firstName" @bind-Value="newCustomer.FirstName" />
    </div>
    <div>
        <label for="lastName">Last Name</label>
        <InputText id="lastName" @bind-Value="newCustomer.LastName" />
    </div>
    <div>
        <label for="phone">Phone</label>
        <InputText id="phone" @bind-Value="newCustomer.Phone" />
    </div>
    <div>
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="newCustomer.Email" />
    </div>
    <div>
        <label for="note">Note</label>
        <InputText id="note" @bind-Value="newCustomer.Note" />
    </div>

    <button type="submit">Add Client</button>
</EditForm>

<h4>All Clients</h4>
<ul>
    @foreach (var customer in customers)
    {
        <li>@customer.FirstName @customer.LastName</li>
    }
</ul>

@code {
    private Customer newCustomer = new Customer(0, "", "", "", "", "");
    private List<Customer> customers;

    protected override void OnInitialized()
    {
        //When the page appears, ALL customers(clients) will appear for the user.
        customers = ClientController.GetAllClients();
    }

    private void HandleValidSubmit()
    {
        //addclient method
        ClientController.AddClient(newCustomer.FirstName, newCustomer.LastName, newCustomer.Phone, newCustomer.Email, newCustomer.Note);

        //Display client method
        customers = ClientController.GetAllClients();

        //reset the customers
        newCustomer = new Customer(0, "", "", "", "", "");
    }
}
